{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","paper","padding","spacing","textAlign","color","palette","text","primary","App","awsConfig","Amplify","configure","Auth","userPoolId","cognitoUserPoolId","userPoolWebClientId","cognitoUserPoolClientId","identityPoolId","cognitoIdentityPoolId","region","addPluggable","AWSIoTProvider","aws_pubsub_region","aws_pubsub_endpoint","mqttBrokerEndpoint","useState","fields","setFields","values","setValues","classes","useEffect","PubSub","subscribe","provider","next","data","value","console","log","error","Grid","container","item","xs","Paper","className","map","idx","variant","square","React","memo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2kBAyBA,IAEMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACFC,SAAU,GAEdC,MAAO,CACHC,QAASJ,EAAMK,QAAQ,GACvBC,UAAW,SACXC,MAAOP,EAAMQ,QAAQC,KAAKC,aAIlC,SAASC,IA7BT,IAAcC,IA+BLA,EA9BLC,UAAQC,UAAU,CACdC,KAAM,CACFC,WAAYJ,EAAUK,kBACtBC,oBAAqBN,EAAUO,wBAC/BC,eAAgBR,EAAUS,sBAC1BC,OAAQV,EAAUU,UAI1BT,UAAQU,aAAa,IAAIC,iBAAe,CACpCC,kBAAmBb,EAAUU,OAC7BI,oBAAoB,SAAD,OAAWd,EAAUe,mBAArB,YAiBZ,MAGiBC,mBAAS,IAH1B,mBAGJC,EAHI,KAGIC,EAHJ,OAIiBF,mBAAS,CAAC,EAAG,EAAG,EAAG,EAAG,IAJvC,mBAIJG,EAJI,KAIIC,EAJJ,KAKLC,EAAUnC,IAehB,OAbAoC,qBAAU,WACNC,IAAOC,UAAU,WAAY,CACzBC,SAAU,mBACXD,UAAU,CACTE,KAAM,SAACC,GACHT,EAAUS,EAAKC,MAAMX,QACrBG,EAAUO,EAAKC,MAAMT,QACrBU,QAAQC,IAAIH,IAEhBI,MAAO,SAACA,GAAD,OAAWF,QAAQC,IAAIC,SAKlC,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACxC,QAAS,EAAzB,UACI,cAACuC,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAf,SACI,cAACC,EAAA,EAAD,CAAOC,UAAWhB,EAAQ9B,MAA1B,6BAGA0B,EAAOqB,KAAI,SAACJ,EAAMK,GACd,OACI,cAACP,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAf,SACI,eAACC,EAAA,EAAD,CAAOC,UAAWhB,EAAQ9B,MAAOiD,QAAQ,WAAWC,QAAM,EAA1D,UACI,kCAAKP,EAAL,OACA,kCAAKf,EAAO,GAAGoB,GAAf,kBAUjBG,UAAMC,KAAK5C,GCnEX6C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.60538659.chunk.js","sourcesContent":["import Amplify, {PubSub} from 'aws-amplify';\nimport {AWSIoTProvider} from '@aws-amplify/pubsub/lib/Providers';\nimport awsConfig from './awsConfig.json'\nimport React, {useEffect, useState} from 'react';\nimport {makeStyles, useTheme} from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport { LineChart, Line, XAxis, YAxis, Label, ResponsiveContainer } from 'recharts';\n\nfunction init(awsConfig) {\n    Amplify.configure({\n        Auth: {\n            userPoolId: awsConfig.cognitoUserPoolId,\n            userPoolWebClientId: awsConfig.cognitoUserPoolClientId,\n            identityPoolId: awsConfig.cognitoIdentityPoolId,\n            region: awsConfig.region,\n        }\n    });\n\n    Amplify.addPluggable(new AWSIoTProvider({\n        aws_pubsub_region: awsConfig.region,\n        aws_pubsub_endpoint: `wss://${awsConfig.mqttBrokerEndpoint}/mqtt`,\n    }));\n}\n\nconst topic = 'app/test' //우리가 임의로 지정 할 수 있는 mqtt subscribe 토픽\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    paper: {\n        padding: theme.spacing(2),\n        textAlign: 'center',\n        color: theme.palette.text.primary,\n    },\n}));\n\nfunction App() {\n\n    init(awsConfig);\n    const [fields, setFields] = useState([])\n    const [values, setValues] = useState([0, 0, 0, 0, 0])\n    const classes = useStyles();\n\n    useEffect(() => {\n        PubSub.subscribe('app/test', {\n            provider: 'AWSIoTProvider'\n        }).subscribe({\n            next: (data) => {\n                setFields(data.value.fields);\n                setValues(data.value.values);\n                console.log(data);\n            },\n            error: (error) => console.log(error)\n        })\n    })\n\n    return (\n        <Grid container spacing={3}>\n            <Grid item xs={12}>\n                <Paper className={classes.paper}> Hello world </Paper>\n            </Grid>\n            {\n                fields.map((item, idx) => {\n                    return (\n                        <Grid item xs={4}>\n                            <Paper className={classes.paper} variant=\"outlined\" square>\n                                <p> {item} </p>\n                                <p> {values[0][idx]} </p>\n                            </Paper>\n                        </Grid>\n                    );\n                })\n            }\n        </Grid>\n    );\n}\n\nexport default React.memo(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}